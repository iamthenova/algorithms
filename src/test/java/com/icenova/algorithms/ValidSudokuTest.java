package com.icenova.algorithms;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

class ValidSudokuTest {

    private ValidSudoku validSudoku;

    @BeforeEach
    void setUp() {
        validSudoku = new ValidSudoku();
    }

    @Test
    void testValidSudoku() {
        char[][] board = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        assertTrue(validSudoku.isValidSudoku(board));
    }

    @Test
    void testInvalidSudoku() {
        char[][] board = {
                //00,  01,  02,  03, 04,  05,  06,  07,  08
                {'.', '.', '.', '.', '5', '.', '.', '1', '.'},
                //10,  11,  12,  13, 14,  15,  16,  17,  18
                {'.', '4', '.', '3', '.', '.', '.', '.', '.'},
                //20,  21,  22,  23, 24,  25,  26,  27,  28
                {'.', '.', '.', '.', '.', '3', '.', '.', '1'},
                {'8', '.', '.', '.', '.', '.', '.', '2', '.'},
                {'.', '.', '2', '.', '7', '.', '.', '.', '.'},
                {'.', '1', '5', '.', '.', '.', '.', '.', '.'},
                {'.', '.', '.', '.', '.', '2', '.', '.', '.'},
                {'.', '2', '.', '9', '.', '.', '.', '.', '.'},
                {'.', '.', '4', '.', '.', '.', '.', '.', '.'}
        };
        assertFalse(validSudoku.isValidSudoku(board));
    }

    @Test
    void testInvalidSudokuDuplicateInRow() {
        char[][] board = {
                {'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        assertFalse(validSudoku.isValidSudoku(board));
    }

    @Test
    void testInvalidSudokuDuplicateInColumn() {
        char[][] board = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '5', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        assertFalse(validSudoku.isValidSudoku(board));
    }

    @Test
    void testInvalidSudokuDuplicateInBox() {
        char[][] board = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '3', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        assertFalse(validSudoku.isValidSudoku(board));
    }

    @Test
    void testEmptySudoku() {
        char[][] board = {
                {'.', '.', '.', '.', '.', '.', '.', '.', '.',},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.',},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.',},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.',},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.',},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.',},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.',},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.',},
                {'.', '.', '.', '.', '.', '.', '.', '.', '.',}
        };
        assertTrue(validSudoku.isValidSudoku(board));
    }

    @Test
    void testPartiallyFilledValidSudoku() {
        char[][] board = {
                {'5', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}
        };
        assertTrue(validSudoku.isValidSudoku(board));
    }
}